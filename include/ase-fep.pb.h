/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Wed Sep 18 09:51:55 2019. */

#ifndef PB_PROTO_ASEFEP_ASE_FEP_PB_H_INCLUDED
#define PB_PROTO_ASEFEP_ASE_FEP_PB_H_INCLUDED
#include <pb.h>

#include "common.pb.h"

#include "ase-fep-ReqResp.pb.h"

#include "fep-ase-ReqResp.pb.h"

#include "dsp.pb.h"

#include "player.pb.h"

#include "production.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Proto_AseFep_Event_Type {
    Proto_AseFep_Event_Type_BOOTED = 0,
    Proto_AseFep_Event_Type_SYSTEM_STATUS_STANDBY = 1,
    Proto_AseFep_Event_Type_SYSTEM_STATUS_ON = 2,
    Proto_AseFep_Event_Type_TUNNEL = 6,
    Proto_AseFep_Event_Type_VOLUME_CHANGED = 12,
    Proto_AseFep_Event_Type_MUTE_CHANGED = 13,
    Proto_AseFep_Event_Type_PLAYER_DATA = 15,
    Proto_AseFep_Event_Type_DSP_TONE_TOUCH = 27
} Proto_AseFep_Event_Type;
#define _Proto_AseFep_Event_Type_MIN Proto_AseFep_Event_Type_BOOTED
#define _Proto_AseFep_Event_Type_MAX Proto_AseFep_Event_Type_DSP_TONE_TOUCH
#define _Proto_AseFep_Event_Type_ARRAYSIZE ((Proto_AseFep_Event_Type)(Proto_AseFep_Event_Type_DSP_TONE_TOUCH+1))

/* Struct definitions */
typedef struct _Proto_AseFep_Event {
    bool has_type;
    Proto_AseFep_Event_Type type;
    pb_size_t which_data;
    union {
        Proto_Production_Tunnel productionTunnel;
        Proto_Dsp_AbsoluteVolume volume;
        Proto_Dsp_Mute mute;
        Proto_Player_Data playerData;
        Proto_Dsp_ToneTouch dspToneTouch;
    } data;
/* @@protoc_insertion_point(struct:Proto_AseFep_Event) */
} Proto_AseFep_Event;

typedef struct _Proto_AseFep_Req {
    bool has_type;
    Proto_AseFep_ReqResp type;
    bool has_id;
    uint32_t id;
    pb_size_t which_data;
    union {
        Proto_Dsp_AudioMode audioMode;
        Proto_Dsp_RequestAudioInput audioInput;
        Proto_Dsp_RequestPositionSoundMode positionSoundMode;
        Proto_Dsp_RequestInternalSpeakerCompensation internalSpeakerCompensation;
        Proto_Dsp_Parameter dspParameter;
        Proto_Dsp_AbsoluteVolume dspAbsoluteVolume;
    } data;
/* @@protoc_insertion_point(struct:Proto_AseFep_Req) */
} Proto_AseFep_Req;

typedef struct _Proto_AseFep_Resp {
    bool has_type;
    Proto_FepAse_ReqResp type;
    bool has_id;
    uint32_t id;
    bool has_genericResponse;
    Proto_Core_GenericResponse genericResponse;
    pb_size_t which_data;
    union {
        Proto_Dsp_AbsoluteVolume volume;
    } data;
/* @@protoc_insertion_point(struct:Proto_AseFep_Resp) */
} Proto_AseFep_Resp;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_AseFep_Req_init_default            {false, (Proto_AseFep_ReqResp)0, false, 0, 0, {Proto_Dsp_AudioMode_init_default}}
#define Proto_AseFep_Resp_init_default           {false, (Proto_FepAse_ReqResp)0, false, 0, false, Proto_Core_GenericResponse_init_default, 0, {Proto_Dsp_AbsoluteVolume_init_default}}
#define Proto_AseFep_Event_init_default          {false, (Proto_AseFep_Event_Type)0, 0, {Proto_Production_Tunnel_init_default}}
#define Proto_AseFep_Req_init_zero               {false, (Proto_AseFep_ReqResp)0, false, 0, 0, {Proto_Dsp_AudioMode_init_zero}}
#define Proto_AseFep_Resp_init_zero              {false, (Proto_FepAse_ReqResp)0, false, 0, false, Proto_Core_GenericResponse_init_zero, 0, {Proto_Dsp_AbsoluteVolume_init_zero}}
#define Proto_AseFep_Event_init_zero             {false, (Proto_AseFep_Event_Type)0, 0, {Proto_Production_Tunnel_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_AseFep_Event_productionTunnel_tag  10
#define Proto_AseFep_Event_volume_tag            11
#define Proto_AseFep_Event_mute_tag              12
#define Proto_AseFep_Event_playerData_tag        14
#define Proto_AseFep_Event_dspToneTouch_tag      15
#define Proto_AseFep_Event_type_tag              1
#define Proto_AseFep_Req_audioMode_tag           12
#define Proto_AseFep_Req_audioInput_tag          13
#define Proto_AseFep_Req_positionSoundMode_tag   14
#define Proto_AseFep_Req_internalSpeakerCompensation_tag 15
#define Proto_AseFep_Req_dspParameter_tag        35
#define Proto_AseFep_Req_dspAbsoluteVolume_tag   40
#define Proto_AseFep_Req_type_tag                1
#define Proto_AseFep_Req_id_tag                  2
#define Proto_AseFep_Resp_volume_tag             11
#define Proto_AseFep_Resp_type_tag               1
#define Proto_AseFep_Resp_id_tag                 2
#define Proto_AseFep_Resp_genericResponse_tag    3

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_AseFep_Req_fields[9];
extern const pb_field_t Proto_AseFep_Resp_fields[5];
extern const pb_field_t Proto_AseFep_Event_fields[7];

/* Maximum encoded size of messages (where known) */
#define Proto_AseFep_Req_size                    25
#define Proto_AseFep_Resp_size                   26
#define Proto_AseFep_Event_size                  133

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define ASE_FEP_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
