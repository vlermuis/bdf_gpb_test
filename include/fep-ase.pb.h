/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Wed Sep 18 09:51:58 2019. */

#ifndef PB_PROTO_FEPASE_FEP_ASE_PB_H_INCLUDED
#define PB_PROTO_FEPASE_FEP_ASE_PB_H_INCLUDED
#include <pb.h>

#include "ase-fep-ReqResp.pb.h"

#include "fep-ase-ReqResp.pb.h"

#include "common.pb.h"

#include "production.pb.h"

#include "system.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Proto_FepAse_Event_Type {
    Proto_FepAse_Event_Type_LINE_IN_SENSE_ACTIVE = 0,
    Proto_FepAse_Event_Type_LINE_IN_SENSE_INACTIVE = 1,
    Proto_FepAse_Event_Type_TUNNEL = 10,
    Proto_FepAse_Event_Type_OVERHEAT = 11
} Proto_FepAse_Event_Type;
#define _Proto_FepAse_Event_Type_MIN Proto_FepAse_Event_Type_LINE_IN_SENSE_ACTIVE
#define _Proto_FepAse_Event_Type_MAX Proto_FepAse_Event_Type_OVERHEAT
#define _Proto_FepAse_Event_Type_ARRAYSIZE ((Proto_FepAse_Event_Type)(Proto_FepAse_Event_Type_OVERHEAT+1))

/* Struct definitions */
typedef struct _Proto_FepAse_Event {
    bool has_type;
    Proto_FepAse_Event_Type type;
    pb_size_t which_data;
    union {
        Proto_Production_Tunnel productionTunnel;
        Proto_System_Overheat overheat_info;
    } data;
/* @@protoc_insertion_point(struct:Proto_FepAse_Event) */
} Proto_FepAse_Event;

typedef struct _Proto_FepAse_Req {
    bool has_type;
    Proto_FepAse_ReqResp type;
    bool has_id;
    uint32_t id;
/* @@protoc_insertion_point(struct:Proto_FepAse_Req) */
} Proto_FepAse_Req;

typedef struct _Proto_FepAse_Resp {
    bool has_type;
    Proto_AseFep_ReqResp type;
    bool has_id;
    uint32_t id;
    bool has_genericResponse;
    Proto_Core_GenericResponse genericResponse;
/* @@protoc_insertion_point(struct:Proto_FepAse_Resp) */
} Proto_FepAse_Resp;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_FepAse_Event_init_default          {false, (Proto_FepAse_Event_Type)0, 0, {Proto_Production_Tunnel_init_default}}
#define Proto_FepAse_Req_init_default            {false, (Proto_FepAse_ReqResp)0, false, 0}
#define Proto_FepAse_Resp_init_default           {false, (Proto_AseFep_ReqResp)0, false, 0, false, Proto_Core_GenericResponse_init_default}
#define Proto_FepAse_Event_init_zero             {false, (Proto_FepAse_Event_Type)0, 0, {Proto_Production_Tunnel_init_zero}}
#define Proto_FepAse_Req_init_zero               {false, (Proto_FepAse_ReqResp)0, false, 0}
#define Proto_FepAse_Resp_init_zero              {false, (Proto_AseFep_ReqResp)0, false, 0, false, Proto_Core_GenericResponse_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_FepAse_Event_productionTunnel_tag  10
#define Proto_FepAse_Event_overheat_info_tag     11
#define Proto_FepAse_Event_type_tag              1
#define Proto_FepAse_Req_type_tag                1
#define Proto_FepAse_Req_id_tag                  2
#define Proto_FepAse_Resp_type_tag               1
#define Proto_FepAse_Resp_id_tag                 2
#define Proto_FepAse_Resp_genericResponse_tag    3

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_FepAse_Event_fields[4];
extern const pb_field_t Proto_FepAse_Req_fields[3];
extern const pb_field_t Proto_FepAse_Resp_fields[4];

/* Maximum encoded size of messages (where known) */
#define Proto_FepAse_Event_size                  133
#define Proto_FepAse_Req_size                    8
#define Proto_FepAse_Resp_size                   12

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FEP_ASE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
